{
  "phase": 2,
  "description": "Temporal augmentation configuration for 3x effective dataset size using standalone functions",
  "module": "moola.data.temporal_augmentation",
  "reference": "Created 2025-10-21 for standalone jitter + magnitude warp functions",

  "augmentation": {
    "jitter": {
      "enabled": true,
      "sigma": 0.03,
      "prob": 0.8,
      "validation_min_correlation": 0.95,
      "description": "Add Gaussian noise (σ=0.03) to 80% of samples. Preserves financial patterns while adding noise robustness.",
      "rationale": "Small noise (3% std) maintains high correlation (>0.95) with originals while regularizing model"
    },
    "magnitude_warp": {
      "enabled": true,
      "sigma": 0.2,
      "n_knots": 4,
      "prob": 0.5,
      "validation_min_correlation": 0.95,
      "description": "Smooth amplitude scaling via cubic spline with 4 knots and 20% variation on 50% of samples.",
      "rationale": "Cubic spline creates smooth scaling curves that preserve temporal patterns while varying magnitudes"
    },
    "combined_min_correlation": 0.90,
    "combined_description": "When both jitter and warp are applied, correlation threshold is slightly lower (0.90) but still maintains strong pattern preservation"
  },

  "expected_improvements": {
    "effective_dataset_size": "3x (174 → ~520 samples per epoch)",
    "accuracy_improvement": "+4-6% (60-65% → 68-72%)",
    "training_stability": "Reduced overfitting via augmentation diversity",
    "regularization_benefit": "Better generalization from increased training variation"
  },

  "cli_usage": {
    "basic_jitter_only": "python3 -m moola.cli train --model simple_lstm --augment-jitter --jitter-sigma 0.03 --device cuda",
    "basic_warp_only": "python3 -m moola.cli train --model simple_lstm --augment-warp --warp-sigma 0.2 --device cuda",
    "combined_jitter_warp": "python3 -m moola.cli train --model simple_lstm --augment-jitter --augment-warp --device cuda",
    "custom_parameters": "python3 -m moola.cli train --model simple_lstm --augment-jitter --jitter-sigma 0.05 --augment-warp --warp-sigma 0.15 --device cuda",
    "with_enhanced_lstm": "python3 -m moola.cli train --model enhanced_simple_lstm --predict-pointers --augment-jitter --augment-warp --device cuda"
  },

  "validation_thresholds": {
    "jitter_only": {
      "min_correlation": 0.95,
      "max_mean_diff": 0.1,
      "std_ratio_range": [0.8, 1.2]
    },
    "warp_only": {
      "min_correlation": 0.95,
      "max_mean_diff": 0.15,
      "std_ratio_range": [0.7, 1.3]
    },
    "combined": {
      "min_correlation": 0.90,
      "max_mean_diff": 0.2,
      "std_ratio_range": [0.6, 1.4]
    }
  },

  "hyperparameter_tuning_ranges": {
    "jitter_sigma": {
      "recommended": 0.03,
      "range": [0.01, 0.10],
      "notes": "Higher values increase diversity but may destroy patterns. Stay below 0.10 for financial data."
    },
    "jitter_prob": {
      "recommended": 0.8,
      "range": [0.5, 1.0],
      "notes": "Higher probability increases augmentation frequency. 0.8 provides good balance."
    },
    "warp_sigma": {
      "recommended": 0.2,
      "range": [0.1, 0.4],
      "notes": "Controls knot magnitude variance. Higher values create more dramatic scaling curves."
    },
    "warp_knots": {
      "recommended": 4,
      "range": [3, 6],
      "notes": "Number of cubic spline knots. More knots = more complex warp curves. 4 provides smooth, natural scaling."
    },
    "warp_prob": {
      "recommended": 0.5,
      "range": [0.3, 0.7],
      "notes": "Probability of applying warping. 0.5 provides good diversity without over-augmentation."
    }
  },

  "implementation_notes": {
    "module_location": "src/moola/data/temporal_augmentation.py",
    "test_location": "tests/data/test_temporal_augmentation.py",
    "functions": [
      "add_jitter(x, sigma, prob) - Adds Gaussian noise",
      "magnitude_warp(x, sigma, n_knots, prob) - Applies cubic spline magnitude scaling",
      "augment_temporal(x, ...) - Combined pipeline applying both techniques",
      "validate_augmentation(original, augmented, min_correlation) - Validates pattern preservation"
    ],
    "integration_points": [
      "CLI flags: --augment-jitter, --augment-warp, --jitter-sigma, --warp-sigma",
      "Model integration: simple_lstm.py and enhanced_simple_lstm.py via model_kwargs",
      "Training loop: Applied during batch processing before forward pass"
    ]
  },

  "monitoring_recommendations": {
    "during_training": [
      "Monitor correlation between augmented and original samples",
      "Track augmentation application rate (should match specified probabilities)",
      "Watch for training instability (sign of too aggressive augmentation)"
    ],
    "validation": [
      "Compare validation accuracy with/without augmentation",
      "Check overfitting gap (train-val accuracy difference)",
      "Verify augmented samples maintain pattern recognizability"
    ],
    "debugging": [
      "If accuracy drops: Reduce sigma values or probabilities",
      "If overfitting persists: Increase probabilities or sigma values",
      "If training is unstable: Disable one augmentation type at a time to isolate issue"
    ]
  },

  "compatibility": {
    "models": ["simple_lstm", "enhanced_simple_lstm"],
    "input_dimensions": [4, 11],
    "data_types": ["OHLC", "RelativeTransform"],
    "hardware": "CPU or CUDA (GPU recommended for training speed)",
    "python_version": ">=3.10",
    "dependencies": ["torch", "numpy", "scipy"]
  }
}
